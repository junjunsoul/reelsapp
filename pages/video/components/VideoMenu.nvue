<template>
	<view class="VideoMenu" :class="{ active: show }" :style="[{ height: winHeight + 'px' }]" @click="$emit('close')">
		<view class="popup" :style="[{ height: winHeight * 0.6 + 'px' }]" @click.stop="">
			<view class="p_head">
				<view class="left">
					<text class="text1">{{ info.title }}</text>
					<text class="text2">共{{ info.length }}集</text>
				</view>
				<text class="right" @click="$emit('close')">关闭</text>
			</view>
			<view class="p_content">
				<waterfall column-count="3" column-width="auto" column-gap="20" left-gap="20" right-gap="20" :show-scrollbar="false">
				    <cell v-for="(item, index) in data" :key="item.id">
						<view class="item" :class="{ active: currentIndex == index }" @click="changeWatch(index)">
							<image class="cover" :src="item.image" mode="aspectFill"></image>
							<text class="info" :style="[{ width: ((winWidth - 80) / 3) - 2 + 'px' }]" v-if="item.url">{{ item.name }}</text>
							<view class="lock" :style="[{ width: ((winWidth - 80) / 3) - 2 + 'px' }]" v-else>
								<image class="icon" src="/static/icons/lock.png" mode="widthFix"></image>
								<text class="text">{{ item.name }}</text>
							</view>
						</view>
				    </cell>
				</waterfall>
			</view>
		</view>
	</view>
</template>

<script>
	export default {
		name: "VideoMenuNvue",
		props: {
			show: {
				type: Boolean,
				default: false
			},
			info: {
				type: Object,
				default: {}
			},
			data: {
				type: Array,
				default: []
			},
			current: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				currentIndex: this.current,
				winWidth: 0,
				winHeight: 0
			};
		},
		watch: {
			current(newValue, oldValue) {
				this.changeWatch(newValue, 1)
			}
		},
		created() {
			
		},
		mounted() {
			this.winWidth = uni.getSystemInfoSync().windowWidth
			this.winHeight = uni.getSystemInfoSync().windowHeight
		},
		methods: {
			changeWatch(index, x) {
				let nindex = index
				if(!this.data[index].url) nindex = this.data.findIndex(item => !item.url)
				this.currentIndex = nindex
				if(x != 1) {
					this.$emit('selected', nindex)
					this.$emit('close')
				}
			}
		}
	}
</script>

<style lang="scss" scoped>
	.VideoMenu {
		width: 750rpx;
		position: absolute;
		bottom: 0;
		left: 0;
		z-index: 100;
		transition: transform 0.5s;
		transform: translateY(100%);
		
		&.active {
			transform: translateY(0);
		}
		
		.popup {
			width: 750rpx;
			background: #000;
			border-radius: 20rpx 20rpx 0 0;
			position: absolute;
			bottom: 0;
			left: 0;
			z-index: 1;
			color: #fff;
			border-top: 2rpx solid #333;
			overflow: hidden;
			display: flex;
			flex-direction: column;
			
			.p_head {
				display: flex;
				flex-direction: row;
				justify-content: space-between;
				position: relative;
				padding: 30rpx 40rpx;

				.left {
					flex: 1;
					display: flex;
					flex-direction: row;
					
					.text1 {
						font-weight: 700;
						line-height: 48rpx;
						color: #fff;
						font-size: 32rpx;
					}
					
					.text2 {
						font-size: 24rpx;
						color: rgba(#fff, 0.5);
						margin: 0 40rpx;
						line-height: 48rpx;
					}
				}
				
				.right {
					color: #EE7F33;
					margin-left: 20rpx;
					font-size: 32rpx;
				}
			}
			
			.p_content {
				flex: 1;
				padding: 20rpx 0;
				
				.item {
					height: 250rpx;
					position: relative;
					background: rgba(#fff, 0.1);
					border: 2rpx solid #333;
					border-radius: 10rpx;
					overflow: hidden;
					margin-bottom: 40rpx;

					&.active {
						border-color: #EE7F33;
					}
					
					.cover {
						height: 246rpx;
						border-radius: 10rpx;
						overflow: hidden;
						border: 2rpx solid transparent;
					}
					
					.info {
						padding: 8rpx;
						text-align: center;
						position: absolute;
						bottom: 0;
						left: 0;
						background: rgba(#000, 0.5);
						color: #fff;
						font-size: 28rpx;
						border-radius: 0 0 10rpx 10rpx;
						overflow: hidden;
					}
					
					.lock {
						height: 246rpx;
						position: absolute;
						top: 0;
						left: 0;
						background: rgba(#000, 0.7);
						display: flex;
						flex-direction: column;
						align-items: center;
						justify-content: center;
						border-radius: 10rpx;
						overflow: hidden;
						
						.icon {
							width: 60rpx;
							margin-bottom: 8rpx;
						}
						
						.text {
							font-size: 28rpx;
							color: #fff;
						}
					}
				}
			}
		}
	}
</style>